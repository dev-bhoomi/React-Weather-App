{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tanu\\\\Desktop\\\\project\\\\react-weather-app\\\\src\\\\Component\\\\Search.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react'\n// import { AsyncPaginate } from \"react-select-async-paginate\"\n// import { GEO_API_URL, geoApiOptions } from \"./Api\"\n\n// const Search = ({ onSerachChange }) => {\n\n//     const [Search, setSearch] = useState(null);\n\n//     const loadOptions = (inputValue) => {\n//         return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\n\n//             .then(response => response.json())\n//             .then((response) => {\n//                 return {\n//                     options: response.data.map((city) => {\n//                         return {\n//                             value: `${city.latitude} ${city.longitude}`,\n//                             label: `${city.name} ${city.countryCode}`,\n//                         }\n//                     })\n//                 }\n//             })\n//             .catch((err) => console.log(err))\n//     };  \n//     const handleOnChange = (searchData) => {\n//         setSearch(searchData)\n//         onSerachChange(searchData)\n//     };\n//     return (\n//         <AsyncPaginate placeholder=\"Search for city\"\n//             debounceTimeout={2000}\n//             value={Search}\n//             onChange={handleOnChange}\n//             loadOptions={loadOptions}\n//         />\n//     )\n// }\n\n// export default Search;\n\nimport React, { useState } from 'react';\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"./Api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Search = _ref => {\n  _s();\n  let {\n    onSearchChange\n  } = _ref;\n  const [Search, setSearch] = useState(null);\n  const loadOptions = inputValue => {\n    return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions).then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name} ${city.countryCode}`\n          };\n        })\n      };\n    }).catch(err => console.log(err));\n  };\n  const handleOnChange = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n      placeholder: \"Search for city\",\n      debounceTimeout: 2000,\n      value: Search,\n      onChange: handleOnChange,\n      loadOptions: loadOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Search, \"xOaWVJvRRgtitgc+1hBgz6V9Q/Y=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","AsyncPaginate","GEO_API_URL","geoApiOptions","jsxDEV","_jsxDEV","Fragment","_Fragment","Search","_ref","_s","onSearchChange","setSearch","loadOptions","inputValue","fetch","then","response","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","catch","err","console","log","handleOnChange","searchData","children","placeholder","debounceTimeout","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Tanu/Desktop/project/react-weather-app/src/Component/Search.jsx"],"sourcesContent":["// import React, { useState } from 'react'\r\n// import { AsyncPaginate } from \"react-select-async-paginate\"\r\n// import { GEO_API_URL, geoApiOptions } from \"./Api\"\r\n\r\n// const Search = ({ onSerachChange }) => {\r\n\r\n//     const [Search, setSearch] = useState(null);\r\n\r\n//     const loadOptions = (inputValue) => {\r\n//         return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\r\n\r\n//             .then(response => response.json())\r\n//             .then((response) => {\r\n//                 return {\r\n//                     options: response.data.map((city) => {\r\n//                         return {\r\n//                             value: `${city.latitude} ${city.longitude}`,\r\n//                             label: `${city.name} ${city.countryCode}`,\r\n//                         }\r\n//                     })\r\n//                 }\r\n//             })\r\n//             .catch((err) => console.log(err))\r\n//     };  \r\n//     const handleOnChange = (searchData) => {\r\n//         setSearch(searchData)\r\n//         onSerachChange(searchData)\r\n//     };\r\n//     return (\r\n//         <AsyncPaginate placeholder=\"Search for city\"\r\n//             debounceTimeout={2000}\r\n//             value={Search}\r\n//             onChange={handleOnChange}\r\n//             loadOptions={loadOptions}\r\n//         />\r\n//     )\r\n// }\r\n\r\n// export default Search;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react'\r\nimport { AsyncPaginate } from \"react-select-async-paginate\"\r\nimport { GEO_API_URL, geoApiOptions } from \"./Api\"\r\n\r\nconst Search = ({ onSearchChange }) => {\r\n    const [Search, setSearch] = useState(null);\r\n\r\n\r\n\r\n    const loadOptions = (inputValue) => {\r\n        return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\r\n\r\n            .then(response => response.json())\r\n            .then((response) => {\r\n                return {\r\n                    options: response.data.map((city) => {\r\n                        return {\r\n                            value: `${city.latitude} ${city.longitude}`,\r\n                            label: `${city.name} ${city.countryCode}`,\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch((err) => console.log(err))\r\n    };\r\n\r\n\r\n    const handleOnChange = (searchData) => {\r\n        setSearch(searchData)\r\n        onSearchChange(searchData)\r\n    };\r\n    return (\r\n        <>\r\n            <AsyncPaginate placeholder=\"Search for city\"\r\n                debounceTimeout={2000}\r\n                value={Search}\r\n                onChange={handleOnChange}\r\n                loadOptions={loadOptions}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Search\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AASA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,WAAW,EAAEC,aAAa,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,MAAMC,MAAM,GAAGC,IAAA,IAAwB;EAAAC,EAAA;EAAA,IAAvB;IAAEC;EAAe,CAAC,GAAAF,IAAA;EAC9B,MAAM,CAACD,MAAM,EAAEI,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAI1C,MAAMa,WAAW,GAAIC,UAAU,IAAK;IAChC,OAAOC,KAAK,CAAE,GAAEb,WAAY,4CAA2CY,UAAW,EAAC,EAAEX,aAAa,CAAC,CAE9Fa,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAAEC,QAAQ,IAAK;MAChB,OAAO;QACHE,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;UACjC,OAAO;YACHC,KAAK,EAAG,GAAED,IAAI,CAACE,QAAS,IAAGF,IAAI,CAACG,SAAU,EAAC;YAC3CC,KAAK,EAAG,GAAEJ,IAAI,CAACK,IAAK,IAAGL,IAAI,CAACM,WAAY;UAC5C,CAAC;QACL,CAAC;MACL,CAAC;IACL,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EACzC,CAAC;EAGD,MAAMG,cAAc,GAAIC,UAAU,IAAK;IACnCtB,SAAS,CAACsB,UAAU,CAAC;IACrBvB,cAAc,CAACuB,UAAU,CAAC;EAC9B,CAAC;EACD,oBACI7B,OAAA,CAAAE,SAAA;IAAA4B,QAAA,eACI9B,OAAA,CAACJ,aAAa;MAACmC,WAAW,EAAC,iBAAiB;MACxCC,eAAe,EAAE,IAAK;MACtBd,KAAK,EAAEf,MAAO;MACd8B,QAAQ,EAAEL,cAAe;MACzBpB,WAAW,EAAEA;IAAY;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B;EAAC,gBACJ,CAAC;AAEX,CAAC;AAAAhC,EAAA,CArCKF,MAAM;AAAAmC,EAAA,GAANnC,MAAM;AAuCZ,eAAeA,MAAM;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}