{"ast":null,"code":"// import React, { useState } from 'react'\n// import { AsyncPaginate } from \"react-select-async-paginate\"\n// import { GEO_API_URL, geoApiOptions } from \"./Api\"\n\n// const Search = ({ onSearchChange }) => {\n\n//     const [Search, setSearch] = useState(null);\n\n//     const loadOptions = (inputValue) => {\n//         return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\n\n//             .then(response => response.json())\n//             .then((response) => {\n//                 return {\n//                     options: response.data.map((city) => {\n//                         return {\n//                             value: `${city.latitude} ${city.longitude}`,\n//                             label: `${city.name} ${city.countryCode}`,\n//                         }\n//                     })\n//                 }\n//             })\n//             .catch((err) => console.log(err))\n//     };  \n//     const handleOnChange = (searchData) => {\n//         setSearch(searchData)\n//         onSearchChange(searchData)\n//     };\n//     return (\n//         <AsyncPaginate placeholder=\"Search for city\"\n//             debounceTimeout={2000}\n//             value={Search}\n//             onChange={handleOnChange}\n//             loadOptions={loadOptions}\n//         />\n//     )\n// }\n\n// export default Search;\n\n// import React, { useState } from 'react'\n// import { AsyncPaginate } from \"react-select-async-paginate\"\n// import { GEO_API_URL, geoApiOptions } from \"./Api\"\n\n// const Search = ({ onSearchChange }) => {\n//     const [Search, setSearch] = useState(null);\n\n//     const loadOptions = (inputValue) => {\n//         return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\n\n//             .then(response => response.json())\n//             .then((response) => {\n//                 return {\n//                     options: response.data.map((city) => {\n//                         return {\n//                             value: `${city.latitude} ${city.longitude}`,\n//                             label: `${city.name} ${city.countryCode}`,\n//                         }\n//                     })\n//                 }\n//             })\n//             .catch((err) => console.log(err))\n//     };\n\n//     const handleOnChange = (searchData) => {\n//         setSearch(searchData)\n//         onSearchChange(searchData)\n//     };\n//     return (\n//         <>\n//             <AsyncPaginate placeholder=\"Search for city\"\n//                 debounceTimeout={2000}\n//                 value={Search}\n//                 onChange={handleOnChange}\n//                 loadOptions={loadOptions}\n//             />\n//         </>\n//     )\n// }\n\n// export default Search","map":{"version":3,"names":[],"sources":["C:/Users/Tanu/Desktop/project/react-weather-app/src/Component/Search.jsx"],"sourcesContent":["// import React, { useState } from 'react'\r\n// import { AsyncPaginate } from \"react-select-async-paginate\"\r\n// import { GEO_API_URL, geoApiOptions } from \"./Api\"\r\n\r\n// const Search = ({ onSearchChange }) => {\r\n\r\n//     const [Search, setSearch] = useState(null);\r\n\r\n//     const loadOptions = (inputValue) => {\r\n//         return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\r\n\r\n//             .then(response => response.json())\r\n//             .then((response) => {\r\n//                 return {\r\n//                     options: response.data.map((city) => {\r\n//                         return {\r\n//                             value: `${city.latitude} ${city.longitude}`,\r\n//                             label: `${city.name} ${city.countryCode}`,\r\n//                         }\r\n//                     })\r\n//                 }\r\n//             })\r\n//             .catch((err) => console.log(err))\r\n//     };  \r\n//     const handleOnChange = (searchData) => {\r\n//         setSearch(searchData)\r\n//         onSearchChange(searchData)\r\n//     };\r\n//     return (\r\n//         <AsyncPaginate placeholder=\"Search for city\"\r\n//             debounceTimeout={2000}\r\n//             value={Search}\r\n//             onChange={handleOnChange}\r\n//             loadOptions={loadOptions}\r\n//         />\r\n//     )\r\n// }\r\n\r\n// export default Search;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react'\r\n// import { AsyncPaginate } from \"react-select-async-paginate\"\r\n// import { GEO_API_URL, geoApiOptions } from \"./Api\"\r\n\r\n// const Search = ({ onSearchChange }) => {\r\n//     const [Search, setSearch] = useState(null);\r\n\r\n\r\n\r\n//     const loadOptions = (inputValue) => {\r\n//         return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\r\n\r\n//             .then(response => response.json())\r\n//             .then((response) => {\r\n//                 return {\r\n//                     options: response.data.map((city) => {\r\n//                         return {\r\n//                             value: `${city.latitude} ${city.longitude}`,\r\n//                             label: `${city.name} ${city.countryCode}`,\r\n//                         }\r\n//                     })\r\n//                 }\r\n//             })\r\n//             .catch((err) => console.log(err))\r\n//     };\r\n\r\n\r\n//     const handleOnChange = (searchData) => {\r\n//         setSearch(searchData)\r\n//         onSearchChange(searchData)\r\n//     };\r\n//     return (\r\n//         <>\r\n//             <AsyncPaginate placeholder=\"Search for city\"\r\n//                 debounceTimeout={2000}\r\n//                 value={Search}\r\n//                 onChange={handleOnChange}\r\n//                 loadOptions={loadOptions}\r\n//             />\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default Search\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AASA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}