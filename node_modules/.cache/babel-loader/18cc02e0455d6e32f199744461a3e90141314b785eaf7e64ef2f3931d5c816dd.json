{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tanu\\\\Desktop\\\\project\\\\react-weather-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React,{useState} from 'react'\n// import \"./App.css\"\n// import Search from './Component/Search'\n// import CurrentWeather from './Component/Current-weather/Current-Weather'\n// import {WEATHER_API_URL,WEATHER_API_KEY} from \"./Component/Api\"\n\n// const App = () => {\n\n//   const[currentWeather,setCurrentWeather] =useState(null);\n//    const[forecast,setForecast] =useState(null);\n\n//   const handleOnSearchChange = (searchData)=>{\n//     const[lat,lon]=searchData.value.split(\" \"); \n//     const CurrentWeatherFetch=fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}`);\n//     const forecasteFetch=fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}`);\n\n//     Promise.all([CurrentWeatherFetch,forecasteFetch])\n//         .then(async(response)=>{\n//           const weatherResponse = await response[0].json();\n//           const forecastResponse = await response[1].json();  \n//           setCurrentWeather({ 'city':searchData.label, ...weatherResponse})\n//           setForecast({ 'city':searchData.label, ...forecastResponse})\n//     })\n//     .catch((err)=>console.log(err));\n//   }\n//   console.log(currentWeather);\n//   console.log(forecast);\n\n//   return (\n//     <>\n//     <div className='container'>\n//     <Search onSerachChange={handleOnSearchChange}/>  \n//     <CurrentWeather data={currentWeather}/>\n\n//     </div>\n//     </>\n//   )\n// }\n\n// export default App\n\nimport { useState } from \"react\";\nimport Search from './Component/Search';\nimport CurrentWeather from './Component/Current-weather/Current-Weather';\n// import Forecast from \"./components/forecast/forecast\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./Component/Api\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const handleOnSearchChange = searchData => {\n    const [lat, lon] = searchData.value.split(\" \");\n    const currentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    const forecastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    Promise.all([currentWeatherFetch, forecastFetch]).then(async response => {\n      const weatherResponse = await response[0].json();\n      const forcastResponse = await response[1].json();\n      setCurrentWeather({\n        city: searchData.label,\n        ...weatherResponse\n      });\n      setForecast({\n        city: searchData.label,\n        ...forcastResponse\n      });\n    }).catch(console.log);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearchChange: handleOnSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n      data: currentWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WWp4biUQ6yxZ26omAvrL3l/oQ6o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Search","CurrentWeather","WEATHER_API_URL","WEATHER_API_KEY","jsxDEV","_jsxDEV","App","_s","currentWeather","setCurrentWeather","forecast","setForecast","handleOnSearchChange","searchData","lat","lon","value","split","currentWeatherFetch","fetch","forecastFetch","Promise","all","then","response","weatherResponse","json","forcastResponse","city","label","catch","console","log","className","children","onSearchChange","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["C:/Users/Tanu/Desktop/project/react-weather-app/src/App.js"],"sourcesContent":["// import React,{useState} from 'react'\r\n// import \"./App.css\"\r\n// import Search from './Component/Search'\r\n// import CurrentWeather from './Component/Current-weather/Current-Weather'\r\n// import {WEATHER_API_URL,WEATHER_API_KEY} from \"./Component/Api\"\r\n\r\n// const App = () => {\r\n\r\n//   const[currentWeather,setCurrentWeather] =useState(null);\r\n//    const[forecast,setForecast] =useState(null);\r\n\r\n\r\n//   const handleOnSearchChange = (searchData)=>{\r\n//     const[lat,lon]=searchData.value.split(\" \"); \r\n//     const CurrentWeatherFetch=fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}`);\r\n//     const forecasteFetch=fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}`);\r\n    \r\n//     Promise.all([CurrentWeatherFetch,forecasteFetch])\r\n//         .then(async(response)=>{\r\n//           const weatherResponse = await response[0].json();\r\n//           const forecastResponse = await response[1].json();  \r\n//           setCurrentWeather({ 'city':searchData.label, ...weatherResponse})\r\n//           setForecast({ 'city':searchData.label, ...forecastResponse})\r\n//     })\r\n//     .catch((err)=>console.log(err));\r\n//   }\r\n//   console.log(currentWeather);\r\n//   console.log(forecast);\r\n\r\n\r\n\r\n\r\n//   return (\r\n//     <>\r\n//     <div className='container'>\r\n//     <Search onSerachChange={handleOnSearchChange}/>  \r\n//     <CurrentWeather data={currentWeather}/>\r\n  \r\n//     </div>\r\n//     </>\r\n//   )\r\n// }\r\n\r\n// export default App\r\n\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport Search from './Component/Search'\r\nimport CurrentWeather from './Component/Current-weather/Current-Weather'\r\n// import Forecast from \"./components/forecast/forecast\";\r\nimport {WEATHER_API_URL,WEATHER_API_KEY} from \"./Component/Api\"\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [currentWeather, setCurrentWeather] = useState(null);\r\n  const [forecast, setForecast] = useState(null);\r\n\r\n  const handleOnSearchChange = (searchData) => {\r\n    const [lat, lon] = searchData.value.split(\" \");\r\n\r\n    const currentWeatherFetch = fetch(\r\n      `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\r\n    );\r\n    const forecastFetch = fetch(\r\n      `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\r\n    );\r\n\r\n    Promise.all([currentWeatherFetch, forecastFetch])\r\n      .then(async (response) => {\r\n        const weatherResponse = await response[0].json();\r\n        const forcastResponse = await response[1].json();\r\n\r\n        setCurrentWeather({ city: searchData.label, ...weatherResponse });\r\n        setForecast({ city: searchData.label, ...forcastResponse });\r\n      })\r\n      .catch(console.log);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Search onSearchChange={handleOnSearchChange} />\r\n      {currentWeather && <CurrentWeather data={currentWeather} />}\r\n      {/* {forecast && <Forecast data={forecast} />} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,cAAc,MAAM,6CAA6C;AACxE;AACA,SAAQC,eAAe,EAACC,eAAe,QAAO,iBAAiB;AAC/D,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMa,oBAAoB,GAAIC,UAAU,IAAK;IAC3C,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGF,UAAU,CAACG,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC;IAE9C,MAAMC,mBAAmB,GAAGC,KAAK,CAC9B,GAAEjB,eAAgB,gBAAeY,GAAI,QAAOC,GAAI,UAASZ,eAAgB,eAC5E,CAAC;IACD,MAAMiB,aAAa,GAAGD,KAAK,CACxB,GAAEjB,eAAgB,iBAAgBY,GAAI,QAAOC,GAAI,UAASZ,eAAgB,eAC7E,CAAC;IAEDkB,OAAO,CAACC,GAAG,CAAC,CAACJ,mBAAmB,EAAEE,aAAa,CAAC,CAAC,CAC9CG,IAAI,CAAC,MAAOC,QAAQ,IAAK;MACxB,MAAMC,eAAe,GAAG,MAAMD,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;MAChD,MAAMC,eAAe,GAAG,MAAMH,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;MAEhDjB,iBAAiB,CAAC;QAAEmB,IAAI,EAAEf,UAAU,CAACgB,KAAK;QAAE,GAAGJ;MAAgB,CAAC,CAAC;MACjEd,WAAW,CAAC;QAAEiB,IAAI,EAAEf,UAAU,CAACgB,KAAK;QAAE,GAAGF;MAAgB,CAAC,CAAC;IAC7D,CAAC,CAAC,CACDG,KAAK,CAACC,OAAO,CAACC,GAAG,CAAC;EACvB,CAAC;EAED,oBACE3B,OAAA;IAAK4B,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB7B,OAAA,CAACL,MAAM;MAACmC,cAAc,EAAEvB;IAAqB;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC/C/B,cAAc,iBAAIH,OAAA,CAACJ,cAAc;MAACuC,IAAI,EAAEhC;IAAe;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAExD,CAAC;AAEV;AAAChC,EAAA,CAhCQD,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}