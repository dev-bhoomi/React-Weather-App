{"ast":null,"code":"import _slicedToArray from\"C:/Users/Tanu/Desktop/React-Weather-App/react-weather-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{AsyncPaginate}from\"react-select-async-paginate\";import{GEO_API_URL,geoApiOptions}from\"./Api\";import{jsx as _jsx}from\"react/jsx-runtime\";var Search=function Search(_ref){var onSearchChange=_ref.onSearchChange;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),Search=_useState2[0],setSearch=_useState2[1];var loadOptions=function loadOptions(inputValue){return fetch(\"\".concat(GEO_API_URL,\"/cities?minPopulation=1000000&namePrefix=\").concat(inputValue),geoApiOptions).then(function(response){return response.json();}).then(function(response){// console.log(responses)\nreturn{options:response.data.map(function(city){return{value:\"\".concat(city.latitude,\" \").concat(city.longitude),label:\"\".concat(city.name,\" \").concat(city.countryCode)};})};}).catch(function(err){return console.log(err);});};var handleOnChange=function handleOnChange(searchData){setSearch(searchData);onSearchChange(searchData);};return/*#__PURE__*/_jsx(AsyncPaginate,{placeholder:\"Search for city\",debounceTimeout:2000,value:Search,onChange:handleOnChange,loadOptions:loadOptions});};export default Search;// import React, { useState } from 'react'\n// import { AsyncPaginate } from \"react-select-async-paginate\"\n// import { GEO_API_URL, geoApiOptions } from \"./Api\"\n// const Search = ({ onSearchChange }) => {\n//     const [Search, setSearch] = useState(null);\n//     const loadOptions = (inputValue) => {\n//         return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\n//             .then(response => response.json())\n//             .then((response) => {\n//                 return {\n//                     options: response.data.map((city) => {\n//                         return {\n//                             value: `${city.latitude} ${city.longitude}`,\n//                             label: `${city.name} ${city.countryCode}`,\n//                         }\n//                     })\n//                 }\n//             })\n//             .catch((err) => console.log(err))\n//     };\n//     const handleOnChange = (searchData) => {\n//         setSearch(searchData)\n//         onSearchChange(searchData)\n//     };\n//     return (\n//         <>\n//             <AsyncPaginate placeholder=\"Search for city\"\n//                 debounceTimeout={2000}\n//                 value={Search}\n//                 onChange={handleOnChange}\n//                 loadOptions={loadOptions}\n//             />\n//         </>\n//     )\n// }\n// export default Search","map":{"version":3,"names":["React","useState","AsyncPaginate","GEO_API_URL","geoApiOptions","jsx","_jsx","Search","_ref","onSearchChange","_useState","_useState2","_slicedToArray","setSearch","loadOptions","inputValue","fetch","concat","then","response","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","catch","err","console","log","handleOnChange","searchData","placeholder","debounceTimeout","onChange"],"sources":["C:/Users/Tanu/Desktop/React-Weather-App/react-weather-app/src/Component/Search.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { AsyncPaginate } from \"react-select-async-paginate\"\r\nimport { GEO_API_URL, geoApiOptions } from \"./Api\"\r\n\r\nconst Search = ({ onSearchChange }) => {\r\n\r\n    const [Search, setSearch] = useState(null);\r\n\r\n    const loadOptions = (inputValue) => {\r\n        return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\r\n\r\n            .then(response => response.json())\r\n            .then((response) => {\r\n                // console.log(responses)\r\n                return {\r\n                    options: response.data.map((city) => {\r\n                        return {\r\n                            value: `${city.latitude} ${city.longitude}`,\r\n                            label: `${city.name} ${city.countryCode}`,\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch((err) => console.log(err))\r\n    };  \r\n    const handleOnChange = (searchData) => {\r\n        setSearch(searchData)\r\n        onSearchChange(searchData)\r\n    };\r\n    return (\r\n        <AsyncPaginate placeholder=\"Search for city\"\r\n            debounceTimeout={2000}\r\n            value={Search}\r\n            onChange={handleOnChange}\r\n            loadOptions={loadOptions}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Search;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react'\r\n// import { AsyncPaginate } from \"react-select-async-paginate\"\r\n// import { GEO_API_URL, geoApiOptions } from \"./Api\"\r\n\r\n// const Search = ({ onSearchChange }) => {\r\n//     const [Search, setSearch] = useState(null);\r\n\r\n\r\n\r\n//     const loadOptions = (inputValue) => {\r\n//         return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\r\n\r\n//             .then(response => response.json())\r\n//             .then((response) => {\r\n//                 return {\r\n//                     options: response.data.map((city) => {\r\n//                         return {\r\n//                             value: `${city.latitude} ${city.longitude}`,\r\n//                             label: `${city.name} ${city.countryCode}`,\r\n//                         }\r\n//                     })\r\n//                 }\r\n//             })\r\n//             .catch((err) => console.log(err))\r\n//     };\r\n\r\n\r\n//     const handleOnChange = (searchData) => {\r\n//         setSearch(searchData)\r\n//         onSearchChange(searchData)\r\n//     };\r\n//     return (\r\n//         <>\r\n//             <AsyncPaginate placeholder=\"Search for city\"\r\n//                 debounceTimeout={2000}\r\n//                 value={Search}\r\n//                 onChange={handleOnChange}\r\n//                 loadOptions={loadOptions}\r\n//             />\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default Search\r\n"],"mappings":"+IAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,aAAa,KAAQ,6BAA6B,CAC3D,OAASC,WAAW,CAAEC,aAAa,KAAQ,OAAO,QAAAC,GAAA,IAAAC,IAAA,yBAElD,GAAM,CAAAC,MAAM,CAAG,SAAAA,OAAAC,IAAA,CAAwB,IAArB,CAAAC,cAAc,CAAAD,IAAA,CAAdC,cAAc,CAE5B,IAAAC,SAAA,CAA4BT,QAAQ,CAAC,IAAI,CAAC,CAAAU,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAnCH,MAAM,CAAAI,UAAA,IAAEE,SAAS,CAAAF,UAAA,IAExB,GAAM,CAAAG,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIC,UAAU,CAAK,CAChC,MAAO,CAAAC,KAAK,IAAAC,MAAA,CAAId,WAAW,8CAAAc,MAAA,CAA4CF,UAAU,EAAIX,aAAa,CAAC,CAE9Fc,IAAI,CAAC,SAAAC,QAAQ,QAAI,CAAAA,QAAQ,CAACC,IAAI,CAAC,CAAC,GAAC,CACjCF,IAAI,CAAC,SAACC,QAAQ,CAAK,CAChB;AACA,MAAO,CACHE,OAAO,CAAEF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAC,SAACC,IAAI,CAAK,CACjC,MAAO,CACHC,KAAK,IAAAR,MAAA,CAAKO,IAAI,CAACE,QAAQ,MAAAT,MAAA,CAAIO,IAAI,CAACG,SAAS,CAAE,CAC3CC,KAAK,IAAAX,MAAA,CAAKO,IAAI,CAACK,IAAI,MAAAZ,MAAA,CAAIO,IAAI,CAACM,WAAW,CAC3C,CAAC,CACL,CAAC,CACL,CAAC,CACL,CAAC,CAAC,CACDC,KAAK,CAAC,SAACC,GAAG,QAAK,CAAAC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,GAAC,CACzC,CAAC,CACD,GAAM,CAAAG,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAIC,UAAU,CAAK,CACnCvB,SAAS,CAACuB,UAAU,CAAC,CACrB3B,cAAc,CAAC2B,UAAU,CAAC,CAC9B,CAAC,CACD,mBACI9B,IAAA,CAACJ,aAAa,EAACmC,WAAW,CAAC,iBAAiB,CACxCC,eAAe,CAAE,IAAK,CACtBb,KAAK,CAAElB,MAAO,CACdgC,QAAQ,CAAEJ,cAAe,CACzBrB,WAAW,CAAEA,WAAY,CAC5B,CAAC,CAEV,CAAC,CAED,cAAe,CAAAP,MAAM,CASrB;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}