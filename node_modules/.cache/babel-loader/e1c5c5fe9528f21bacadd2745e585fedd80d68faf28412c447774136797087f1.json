{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tanu\\\\Desktop\\\\project\\\\react-weather-app\\\\src\\\\Component\\\\Search.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"./Api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = _ref => {\n  _s();\n  let {\n    onSearchChange\n  } = _ref;\n  const [Search, setSearch] = useState(null);\n  const loadOptions = inputValue => {\n    return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions).then(response => response.json()).then(responses => {\n      // console.log(responses)\n      // return {\n      //     options: response.data.map((citys) => {\n      //         return {\n      //             value: `${city.latitude} ${city.longitude}`,\n      //             label: `${city.name} ${city.countryCode}`,\n      //         }\n      //     })\n      // }\n    }).catch(err => console.log(err));\n  };\n  const handleOnChange = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n    placeholder: \"Search for city\",\n    debounceTimeout: 2000,\n    value: Search,\n    onChange: handleOnChange,\n    loadOptions: loadOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(Search, \"xOaWVJvRRgtitgc+1hBgz6V9Q/Y=\");\n_c = Search;\nexport default Search;\n\n// import React, { useState } from 'react'\n// import { AsyncPaginate } from \"react-select-async-paginate\"\n// import { GEO_API_URL, geoApiOptions } from \"./Api\"\n\n// const Search = ({ onSearchChange }) => {\n//     const [Search, setSearch] = useState(null);\n\n//     const loadOptions = (inputValue) => {\n//         return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\n\n//             .then(response => response.json())\n//             .then((response) => {\n//                 return {\n//                     options: response.data.map((city) => {\n//                         return {\n//                             value: `${city.latitude} ${city.longitude}`,\n//                             label: `${city.name} ${city.countryCode}`,\n//                         }\n//                     })\n//                 }\n//             })\n//             .catch((err) => console.log(err))\n//     };\n\n//     const handleOnChange = (searchData) => {\n//         setSearch(searchData)\n//         onSearchChange(searchData)\n//     };\n//     return (\n//         <>\n//             <AsyncPaginate placeholder=\"Search for city\"\n//                 debounceTimeout={2000}\n//                 value={Search}\n//                 onChange={handleOnChange}\n//                 loadOptions={loadOptions}\n//             />\n//         </>\n//     )\n// }\n\n// export default Search\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","AsyncPaginate","GEO_API_URL","geoApiOptions","jsxDEV","_jsxDEV","Search","_ref","_s","onSearchChange","setSearch","loadOptions","inputValue","fetch","then","response","json","responses","catch","err","console","log","handleOnChange","searchData","placeholder","debounceTimeout","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Tanu/Desktop/project/react-weather-app/src/Component/Search.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { AsyncPaginate } from \"react-select-async-paginate\"\r\nimport { GEO_API_URL, geoApiOptions } from \"./Api\"\r\n\r\nconst Search = ({ onSearchChange }) => {\r\n\r\n    const [Search, setSearch] = useState(null);\r\n\r\n    const loadOptions = (inputValue) => {\r\n        return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\r\n\r\n            .then(response => response.json())\r\n            .then((responses) => {\r\n                // console.log(responses)\r\n                // return {\r\n                //     options: response.data.map((citys) => {\r\n                //         return {\r\n                //             value: `${city.latitude} ${city.longitude}`,\r\n                //             label: `${city.name} ${city.countryCode}`,\r\n                //         }\r\n                //     })\r\n                // }\r\n            })\r\n            .catch((err) => console.log(err))\r\n    };  \r\n    const handleOnChange = (searchData) => {\r\n        setSearch(searchData)\r\n        onSearchChange(searchData)\r\n    };\r\n    return (\r\n        <AsyncPaginate placeholder=\"Search for city\"\r\n            debounceTimeout={2000}\r\n            value={Search}\r\n            onChange={handleOnChange}\r\n            loadOptions={loadOptions}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Search;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react'\r\n// import { AsyncPaginate } from \"react-select-async-paginate\"\r\n// import { GEO_API_URL, geoApiOptions } from \"./Api\"\r\n\r\n// const Search = ({ onSearchChange }) => {\r\n//     const [Search, setSearch] = useState(null);\r\n\r\n\r\n\r\n//     const loadOptions = (inputValue) => {\r\n//         return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions)\r\n\r\n//             .then(response => response.json())\r\n//             .then((response) => {\r\n//                 return {\r\n//                     options: response.data.map((city) => {\r\n//                         return {\r\n//                             value: `${city.latitude} ${city.longitude}`,\r\n//                             label: `${city.name} ${city.countryCode}`,\r\n//                         }\r\n//                     })\r\n//                 }\r\n//             })\r\n//             .catch((err) => console.log(err))\r\n//     };\r\n\r\n\r\n//     const handleOnChange = (searchData) => {\r\n//         setSearch(searchData)\r\n//         onSearchChange(searchData)\r\n//     };\r\n//     return (\r\n//         <>\r\n//             <AsyncPaginate placeholder=\"Search for city\"\r\n//                 debounceTimeout={2000}\r\n//                 value={Search}\r\n//                 onChange={handleOnChange}\r\n//                 loadOptions={loadOptions}\r\n//             />\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default Search\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,WAAW,EAAEC,aAAa,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,MAAM,GAAGC,IAAA,IAAwB;EAAAC,EAAA;EAAA,IAAvB;IAAEC;EAAe,CAAC,GAAAF,IAAA;EAE9B,MAAM,CAACD,MAAM,EAAEI,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMW,WAAW,GAAIC,UAAU,IAAK;IAChC,OAAOC,KAAK,CAAE,GAAEX,WAAY,4CAA2CU,UAAW,EAAC,EAAET,aAAa,CAAC,CAE9FW,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAAEG,SAAS,IAAK;MACjB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACH,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EACzC,CAAC;EACD,MAAMG,cAAc,GAAIC,UAAU,IAAK;IACnCb,SAAS,CAACa,UAAU,CAAC;IACrBd,cAAc,CAACc,UAAU,CAAC;EAC9B,CAAC;EACD,oBACIlB,OAAA,CAACJ,aAAa;IAACuB,WAAW,EAAC,iBAAiB;IACxCC,eAAe,EAAE,IAAK;IACtBC,KAAK,EAAEpB,MAAO;IACdqB,QAAQ,EAAEL,cAAe;IACzBX,WAAW,EAAEA;EAAY;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV,CAAC;AAAAvB,EAAA,CAjCKF,MAAM;AAAA0B,EAAA,GAAN1B,MAAM;AAmCZ,eAAeA,MAAM;;AASrB;AACA;AACA;;AAEA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}